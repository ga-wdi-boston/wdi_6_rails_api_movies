* install rails-api gem


gem install rails-api

* Generate an articles api app.
rails-api new articles_api -d postgresql -T
cd articles_api

* Notice that app/views directory is missing. And the Gemfile is pretty bare.

* Generate a Article resource with scaffolding.
rails g scaffold Article title body:text

* This generates much less than is typically generated by a rails scaffold.

* Generate a User model.
rails g model User email

* Generate a Comment model.
rails g scaffold Comment body:text user:belongs_to article:belongs_to


* rake db:create and rake db:migrate

* Look at the articles controller.  It has all the actions
BUT only outputs a JSON "Representation" of the resource. Previously we
where always outputting a HTML "Representation" of the resource.

* Check out the routes.rb.
Why don't we need the new and edit action?

This is truely a RESTFUL resource. Not cluttered up with actions to create forms.

* Add a root to articles index

* copy the seed file from the model caching demo
cp ../wdi_6_rails_demo_model_caching/db/seeds.rb db/.

Make sure were only creating 10 articles in the seeds.rb

* Add faker to the Gemfile and bundle

* rake db:reset

* start the server
and we see all the Articles!!!!

* Add the active_model_serializers gem to the Gemfile and bundle

* Generate a serializer for the Article resource.
rails g serializer article

* Add the title and body attributes in the serializer.

attributes :id, :title, :body

* restart server and got to the root.
Notice that the updated_at and created_at columns are missing!
We usually don't want to show these.

* Lets get rid of the root node in the JSON generated.
# Add to the Articles controller
def default_serializer_options
  {root: false}
end


* Lets embed comments for each article in the JSON.

# add to the Article serializer
has_many :comments

* Generate a serializer for comment and add the body attribute
rails g serializer Comment

Now the comment only show it's id and body.

* Lets show the comment creator.
 attributes :id, :body, :creator

  def creator
    "#{object.user.email}"
  end
